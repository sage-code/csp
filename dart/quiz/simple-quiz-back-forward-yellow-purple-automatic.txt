import 'package:flutter/material.dart';

const Color color1 = Color.fromARGB(255, 212, 55, 55);
const Color color2 = Color.fromARGB(255, 93, 55, 219);
const Color color3 = Color.fromARGB(255, 55, 218, 217);
const Color colorappbar = Color.fromARGB(255, 158, 40, 20);

void main() => runApp(MaterialApp(
      home: MyApp(),
      debugShowCheckedModeBanner: false,
    ));

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  var a = [0, 0, 0, 0]; //buttons pressed
  var b = [0, 0, 0, 0];
  var c = [0, 0, 0, 0];
  var d = [0, 0, 0, 0];

  var answer = [0, 0, 0, 0];
  bool buttonenabled = true;
  bool completed = false;
  var score = 0;
  var n = 0;
  String result = "";

  List queList = [
    Questions(
        "1. Does Canada have a larger land area, excluding water, than the US?",
        "false"),
    Questions("2. Does Greenland is a country on the North American continent?",
        "false"),
    Questions("3. Does Switzerland has the higher cost of living in the world?",
        "true"),
    Questions(
        "4. Does whole Africa has a larger population than China?", "false"),
  ];

  List listSolutions = [
    Solutions("true", "maybe", "perhaps", "false"),
    Solutions("maybe", "that's possible ", "false", "don't know"),
    Solutions("someone told me that", "true", "that's possible ", "false"),
    Solutions("false", "that's possible ", "true",
        "I think I know, but I'm not sure, I'll answer on another occasion"),
  ];

  void checkAnswer(String choice) {
    if (choice == queList[n].ans) {
      answer[n] = 1;
    } else {
      answer[n] = 0;
    }

    setState(() {
      if (n < queList.length - 1) {
        n = n + 1;
      } else {
        completed = true;
        result = "Quiz completed!";
        buttonenabled = false;
        print("completed: $score points");
      }
    });
  } // end checkanswer

  void reset() {
    setState(() {
      n = 0;
      score = 0;
      result = "";
      for (var i = 0; i < answer.length; i++) {
        answer[i] = 0;
        a[i] = 0;
        b[i] = 0;
        c[i] = 0;
        d[i] = 0;
      }
    });
  }

  void calculateScore() {
    score = 0;
    for (var i = 0; i < answer.length; i++) {
      score += answer[i];
    }
  }

  void printScore() {
    print("--- ${n + 1} -----");
    for (var i = 0; i < answer.length; i++) {
      print(answer[i]);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: colorappbar,
        title: Text("Simple Quiz"),
        centerTitle: true,
      ),
      body: Builder(
        builder: (ctx) => Container(
          padding: EdgeInsets.symmetric(vertical: 20, horizontal: 15),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              Container(
                  height: 100,
                  width: double.infinity,
                  padding: EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    border: Border.all(
                      color: color2,
                      width: 1,
                    ),
                    boxShadow: [
                      BoxShadow(
                        spreadRadius: 1,
                        blurRadius: 1,
                        color: color3,
                        offset: Offset(2.0, 2.0),
                      ),
                    ],
                  ),
                  child: Text(
                    queList[n].que,
                    style: TextStyle(
                      fontSize: 15.0,
                      color: Colors.black,
                    ),
                  )),
              SizedBox(
                height: 15,
              ),

              ///////////////////////// start button 1

              ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    primary: (a[n] == 1) ? Colors.amber : Colors.purple,
                    minimumSize: const Size.fromHeight(40), // NEW
                  ),
                  onPressed: buttonenabled
                      ? () {
                          a[n] = 1;
                          b[n] = 0;
                          c[n] = 0;
                          d[n] = 0;
                          checkAnswer(listSolutions[n].sol0);

                          calculateScore();
                          printScore();
                        }
                      : null,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: Text(listSolutions[n].sol0,
                        style: TextStyle(
                          fontSize: 16,
                        )),
                  )),
              //////////////////////// end button 1
              SizedBox(
                height: 5,
              ),
              ////////////////// start button 2
              ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    primary: (b[n] == 1) ? Colors.amber : Colors.purple,
                    minimumSize: const Size.fromHeight(40), // NEW
                  ),
                  onPressed: buttonenabled
                      ? () {
                          a[n] = 0;
                          b[n] = 1;
                          c[n] = 0;
                          d[n] = 0;
                          checkAnswer(listSolutions[n].sol1);
                          calculateScore();
                          printScore();
                        }
                      : null,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: Text(listSolutions[n].sol1,
                        style: TextStyle(
                          fontSize: 16,
                        )),
                  )),

              //////////////////////// end button 2
              SizedBox(
                height: 5,
              ),
              ////////////////// start button 3

              ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    primary: (c[n] == 1) ? Colors.amber : Colors.purple,
                    minimumSize: const Size.fromHeight(40), // NEW
                  ),
                  onPressed: buttonenabled
                      ? () {
                          a[n] = 0;
                          b[n] = 0;
                          c[n] = 1;
                          d[n] = 0;
                          checkAnswer(listSolutions[n].sol2);
                          calculateScore();
                          printScore();
                        }
                      : null,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: Text(listSolutions[n].sol2,
                        style: TextStyle(
                          fontSize: 16,
                        )),
                  )),

              //////////////////////// end button 3
              SizedBox(
                height: 5,
              ),
              ////////////////// start button 4
              ElevatedButton(
                  style: ElevatedButton.styleFrom(
                    primary: (d[n] == 1) ? Colors.amber : Colors.purple,
                    minimumSize: const Size.fromHeight(40), // NEW
                  ),
                  onPressed: buttonenabled
                      ? () {
                          a[n] = 0;
                          b[n] = 0;
                          c[n] = 0;
                          d[n] = 1;
                          checkAnswer(listSolutions[n].sol3);
                          calculateScore();
                          printScore();
                          ElevatedButton.styleFrom(
                            primary: Colors.green,
                          );
                        }
                      : null,
                  child: Align(
                    alignment: Alignment.centerLeft,
                    child: Text(listSolutions[n].sol3,
                        style: TextStyle(
                          fontSize: 16,
                        )),
                  )),

              //////////////// end button 4

              SizedBox(
                height: 15,
              ),

              /////////////// start navigation buttons
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                children: <Widget>[
                  ////////////// start reset button
                  OutlinedButton(
                    onPressed: () {
                      buttonenabled = true;
                      reset();

                      printScore();

                      print("--- ${n + 1} ---");
                    },
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.all(20),
                      shape: BeveledRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text('Reset', style: TextStyle(fontSize: 20)),
                  ),

                  /////////////////////// start back button
                  OutlinedButton(
                    onPressed: () {
                      setState(() {
                        print("back to ${n + 1} ");

                        result = "";
                        buttonenabled = true;
                        // answer[n] = 0;

                        if (completed == false) {
                          if (n > 0) {
                            n = n - 1;
                            //     answer[n] = 0;
                          }
                        }

                        calculateScore();
                        printScore();

                        completed = false;
                      });
                    },
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.all(20),
                      shape: BeveledRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text('Back',
                        style: TextStyle(fontSize: 20, color: color1)),
                  ),

                  ////////////////// start forward button
                  OutlinedButton(
                    onPressed: () {
                      setState(() {
                        print("forward to ${n + 1} ");

                        if (n < queList.length - 1) {
                          n = n + 1;
                          //   answer[n] = 0;
                        } else {
                          completed = true;
                          result = "Quiz completed!";
                          buttonenabled = false;
                          print("completed: $score points");
                        }

                        calculateScore();
                        printScore();
                      });
                    },
                    style: OutlinedButton.styleFrom(
                      padding: EdgeInsets.all(20),
                      shape: BeveledRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: Text('Forward',
                        style: TextStyle(fontSize: 20, color: color1)),
                  ),
                ],
              ),

              ////////////// end buttons navigation
              SizedBox(
                height: 25,
              ),
              ///////////////// row score

              Container(
                width: double.infinity,
                margin: EdgeInsets.all(5),
                padding: EdgeInsets.all(5),
                alignment: Alignment.center,
                child: Column(children: [
                  Text(
                    '$result',
                    style: TextStyle(fontSize: 16, color: color2),
                  ),
                  Text("Question ${n + 1}/4",
                      style: TextStyle(
                        color: Colors.black,
                        fontWeight: FontWeight.bold,
                      )),
                  Text("Score: $score",
                      style: TextStyle(
                        color: Colors.black,
                        fontWeight: FontWeight.bold,
                      )),
                ]),
              ),

              /// end row score

              ////////////////
            ],
          ),
        ),
      ),
    );
  }
}

class Questions {
  String que;
  String ans;
  Questions(this.que, this.ans);
}

class Solutions {
  String sol0;
  String sol1;
  String sol2;
  String sol3;
  Solutions(this.sol0, this.sol1, this.sol2, this.sol3);
}
